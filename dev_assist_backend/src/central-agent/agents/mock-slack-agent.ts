import { Injectable } from '@nestjs/common';
import { EnhancedLogger } from '../../utils/logger';
import { IAgent } from '../agent-factory/agent-factory.service';
import { StepResult } from '../models/action-plan.model';

@Injectable()
export class MockSlackAgent implements IAgent {
  private readonly logger = EnhancedLogger.getLogger('MockSlackAgent');
  
  async executePrompt(prompt: string): Promise<StepResult> {
    this.logger.log(`MockSlackAgent executing: ${prompt}`);
    
    // Gi·∫£ l·∫≠p ƒë·ªô tr·ªÖ
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // X·ª≠ l√Ω d·ª±a tr√™n prompt
    if (prompt.toLowerCase().includes('th√¥ng b√°o') || prompt.toLowerCase().includes('g·ª≠i tin nh·∫Øn')) {
      if (prompt.toLowerCase().includes('ƒë√£ ho√†n th√†nh') || prompt.toLowerCase().includes('c·∫≠p nh·∫≠t')) {
        return this.mockSendCompletionMessage(prompt);
      } else if (prompt.toLowerCase().includes('kho·∫£ng th·ªùi gian') || 
                prompt.toLowerCase().includes('ƒë·ªÅ xu·∫•t th·ªùi gian') || 
                prompt.toLowerCase().includes('th·ªùi gian ph√π h·ª£p') || 
                prompt.toLowerCase().includes('l·ªãch h·ªçp') ||
                prompt.toLowerCase().includes('cu·ªôc h·ªçp')) {
        return this.mockSendMeetingTimeProposal(prompt);
      } else if (prompt.toLowerCase().includes('minh') && 
                (prompt.toLowerCase().includes('b·∫≠n') || 
                 prompt.toLowerCase().includes('l·ªãch tr·ªëng') || 
                 prompt.toLowerCase().includes('ƒëi·ªÅu ch·ªânh l·ªãch'))) {
        return this.mockSendScheduleAdjustmentInquiry(prompt);
      } else {
        return this.mockSendGeneralMessage(prompt);
      }
    }
    
    if (prompt.toLowerCase().includes('t√¨m ki·∫øm')) {
      return this.mockSearchMessages(prompt);
    }
    
    // Ki·ªÉm tra n·∫øu prompt h·ªèi v·ªÅ l·ªãch b·∫≠n c·ªßa Minh
    if ((prompt.toLowerCase().includes('h·ªèi') || prompt.toLowerCase().includes('ki·ªÉm tra')) && 
        prompt.toLowerCase().includes('minh') && 
        (prompt.toLowerCase().includes('b·∫≠n') || prompt.toLowerCase().includes('l·ªãch') || prompt.toLowerCase().includes('th·ªùi gian'))) {
      return this.mockSendScheduleAdjustmentInquiry(prompt);
    }
    
    // Fallback
    return {
      success: true,
      data: {
        message: `ƒê√£ g·ª≠i tin nh·∫Øn: ${prompt}`,
        channel: 'general',
        timestamp: new Date().toISOString()
      },
      metadata: {
        executionTime: 300,
        tokenUsage: 50
      }
    };
  }
  
  /**
   * T√¨m ki·∫øm tin nh·∫Øn
   */
  private mockSearchMessages(prompt: string): StepResult {
    // Ki·ªÉm tra xem prompt c√≥ ƒë·ªÅ c·∫≠p ƒë·∫øn task XDEMO2 kh√¥ng
    const taskMatches = prompt.match(/XDEMO2-\d+/g);
    const taskIds = taskMatches ? [...new Set(taskMatches)] : [];
    
    // L·∫•y th√¥ng tin th√†nh vi√™n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong context n·∫øu c√≥
    let specifiedParticipants = [];
    try {
      const contextMatch = prompt.match(/context\.specifiedParticipants/);
      if (contextMatch) {
        // N·∫øu c√≥ tham chi·∫øu ƒë·∫øn context.specifiedParticipants trong prompt
        const participantsMatch = prompt.match(/\[(.*?)\]/);
        if (participantsMatch && participantsMatch[1]) {
          specifiedParticipants = participantsMatch[1].split(',').map(p => p.trim().replace(/"/g, ''));
        }
      }
    } catch (error) {
      this.logger.error(`L·ªói khi ph√¢n t√≠ch th√†nh vi√™n t·ª´ context: ${error.message}`);
    }
    
    // T·∫°o danh s√°ch tin nh·∫Øn ƒë·ªông d·ª±a tr√™n context
    let messages = [];
    
    // N·∫øu t√¨m th·∫•y c√°c task c·ª• th·ªÉ, t·∫°o tin nh·∫Øn li√™n quan ƒë·∫øn ch√∫ng
    if (taskIds.length > 0) {
      messages = taskIds.map(taskId => {
        // T·∫°o c√°c lo·∫°i tin nh·∫Øn kh√°c nhau cho m·ªói task
        return {
          text: `ƒê√£ ho√†n th√†nh task ${taskId}. Code ƒë√£ ƒë∆∞·ª£c review v√† merge.`,
          user: 'U12345',
          timestamp: new Date(Date.now() - Math.floor(Math.random() * 86400000)).toISOString(),
          channel: 'general',
          threadTs: `${Date.now() - 3600000}.${Math.floor(Math.random() * 1000000)}`
        };
      });
    } 
    // N·∫øu t√¨m ki·∫øm v·ªÅ vi·ªác ho√†n th√†nh c√¥ng vi·ªác 
    else if (prompt.toLowerCase().includes('ho√†n th√†nh') || 
             prompt.toLowerCase().includes('xong vi·ªác') || 
             prompt.toLowerCase().includes('done')) {
      messages = [
        {
          text: 'ƒê√£ ho√†n th√†nh task XDEMO2-1. PR ƒë√£ ƒë∆∞·ª£c merge.',
          user: 'U12345',
          timestamp: new Date(Date.now() - 3600000).toISOString(),
          channel: 'general'
        },
        {
          text: 'ƒê√£ xong task XDEMO2-2 v√† XDEMO2-3. C·∫ßn team review code.',
          user: 'U67890',
          timestamp: new Date(Date.now() - 7200000).toISOString(),
          channel: 'dev-team'
        },
        {
          text: 'T√¥i ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√¥ng vi·ªác ƒë∆∞·ª£c giao h√¥m nay (XDEMO2-5, XDEMO2-7)',
          user: 'U12345',
          timestamp: new Date(Date.now() - 1800000).toISOString(),
          channel: 'status-updates'
        }
      ];
    }
    // N·∫øu t√¨m ki·∫øm v·ªÅ t√≠nh nƒÉng m·ªõi ho·∫∑c cu·ªôc h·ªçp
    else if (prompt.toLowerCase().includes('t√≠nh nƒÉng m·ªõi') || 
             prompt.toLowerCase().includes('cu·ªôc h·ªçp') ||
             prompt.toLowerCase().includes('h·ªçp') ||
             prompt.toLowerCase().includes('th·∫£o lu·∫≠n')) {
      // X√°c ƒë·ªãnh th√†nh vi√™n team d·ª±a tr√™n context ho·∫∑c s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh
      let teamMembers = specifiedParticipants.length > 0 
        ? specifiedParticipants 
        : ["Ph√∫c", "H∆∞ng", "ƒêƒÉng"];
        
      // Format danh s√°ch th√†nh vi√™n th√†nh chu·ªói ƒë·ªÅ c·∫≠p
      const memberMentions = teamMembers.map(member => `@${member}`).join(' ');
      
      // T·∫°o tin nh·∫Øn ph√π h·ª£p v·ªõi th√†nh vi√™n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
      messages = [
        {
          text: `Ch√∫ng ta c·∫ßn t·ªï ch·ª©c cu·ªôc h·ªçp v·ªÅ t√≠nh nƒÉng authentication m·ªõi cho d·ª± √°n XDEMO2. ${memberMentions} c·∫ßn tham gia.`,
          user: 'U12345',
          userName: 'Ph√∫c',
          timestamp: new Date(Date.now() - 172800000).toISOString(), // 2 ng√†y tr∆∞·ªõc
          channel: 'dev-team',
          channelId: 'C08JFTGTN2K'
        },
        {
          text: 'C√°c t√≠nh nƒÉng m·ªõi cho XDEMO2 trong sprint n√†y bao g·ªìm: 1. C·∫£i thi·ªán UX ƒëƒÉng nh·∫≠p, 2. Th√™m x√°c th·ª±c 2FA, 3. Dashboard th·ªëng k√™ ng∆∞·ªùi d√πng',
          user: 'U67890',
          userName: 'H∆∞ng',
          timestamp: new Date(Date.now() - 259200000).toISOString(), // 3 ng√†y tr∆∞·ªõc
          channel: 'project-xdemo',
          channelId: 'C08JFTGTN2K'
        },
        {
          text: `Team ph√°t tri·ªÉn g·ªìm ${memberMentions} s·∫Ω l√†m vi·ªác tr√™n t√≠nh nƒÉng x√°c th·ª±c m·ªõi. C·∫ßn s·∫Øp x·∫øp th·ªùi gian h·ªçp tu·∫ßn n√†y.`,
          user: 'U55555',
          userName: 'ƒêƒÉng',
          timestamp: new Date(Date.now() - 86400000).toISOString(), // 1 ng√†y tr∆∞·ªõc
          channel: 'general',
          channelId: 'C08JFTGTN2K'
        }
      ];
    }
    // T√¨m ki·∫øm m·∫∑c ƒë·ªãnh
    else {
      messages = [
        {
          text: 'ƒê√£ ho√†n th√†nh task XDEMO2-1',
          user: 'U12345',
          timestamp: new Date().toISOString(),
          channel: 'general'
        },
        {
          text: 'C·∫ßn review task XDEMO2-2',
          user: 'U67890',
          timestamp: new Date().toISOString(),
          channel: 'dev-team'
        }
      ];
    }
    
    return {
      success: true,
      data: {
        messages,
        total: messages.length,
        query: prompt.substring(0, 50)
      },
      metadata: {
        executionTime: 310 + messages.length * 10,
        tokenUsage: 160 + messages.length * 20
      }
    };
  }
  
  /**
   * Gi·∫£ l·∫≠p g·ª≠i th√¥ng b√°o ho√†n th√†nh c√¥ng vi·ªác
   */
  private mockSendCompletionMessage(prompt: string): StepResult {
    // X√°c ƒë·ªãnh k√™nh v√† ng∆∞·ªùi nh·∫≠n
    const channelInfo = this.getChannelInfo(prompt);
    
    // T·∫°o tin nh·∫Øn
    const message = {
      text: "Th√¥ng b√°o: ƒê√£ ho√†n th√†nh c√¥ng vi·ªác ƒë∆∞·ª£c giao",
      blocks: [
        {
          type: "header",
          text: {
            type: "plain_text",
            text: "‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i c√¥ng vi·ªác",
            emoji: true
          }
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: `*${this.extractUserName(prompt)}* ƒë√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa ${this.extractTaskCount(prompt)} task sang *Done*:`
          }
        },
        {
          type: "section",
          fields: [
            {
              type: "mrkdwn",
              text: "*Task*: XDEMO2-1: Fix login page layout"
            },
            {
              type: "mrkdwn",
              text: "*Tr·∫°ng th√°i*: Done ‚úÖ"
            },
            {
              type: "mrkdwn",
              text: "*Task*: XDEMO2-2: Add unit tests for auth service"
            },
            {
              type: "mrkdwn",
              text: "*Tr·∫°ng th√°i*: Done ‚úÖ"
            }
          ]
        },
        {
          type: "context",
          elements: [
            {
              type: "mrkdwn",
              text: `üïí C·∫≠p nh·∫≠t l√∫c ${new Date().toLocaleTimeString()} ${new Date().toLocaleDateString()}`
            }
          ]
        }
      ]
    };
    
    return {
      success: true,
      data: {
        message: message,
        messageText: message.text,
        channel: channelInfo.channel,
        channelId: channelInfo.channelId,
        timestamp: new Date().toISOString(),
        messageType: 'task_update'
      },
      metadata: {
        executionTime: 320,
        tokenUsage: 110
      }
    };
  }
  
  /**
   * Gi·∫£ l·∫≠p g·ª≠i tin nh·∫Øn th√¥ng th∆∞·ªùng
   */
  private mockSendGeneralMessage(prompt: string): StepResult {
    // X√°c ƒë·ªãnh k√™nh v√† ng∆∞·ªùi nh·∫≠n
    const channelInfo = this.getChannelInfo(prompt);
    
    // Tr√≠ch xu·∫•t n·ªôi dung tin nh·∫Øn t·ª´ prompt
    const messageContent = this.extractMessageContent(prompt);
    
    // T·∫°o tin nh·∫Øn
    const message = {
      text: messageContent,
      blocks: [
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: messageContent
          }
        }
      ]
    };
    
    return {
      success: true,
      data: {
        message: message,
        messageText: message.text,
        channel: channelInfo.channel,
        channelId: channelInfo.channelId,
        timestamp: new Date().toISOString(),
        messageType: 'general'
      },
      metadata: {
        executionTime: 300,
        tokenUsage: 80
      }
    };
  }
  
  /**
   * Ph∆∞∆°ng th·ª©c h·ªó tr·ª£ l·∫•y th√¥ng tin k√™nh t·ª´ prompt
   */
  private getChannelInfo(prompt: string): { channel: string, channelId: string } {
    if (prompt.toLowerCase().includes('channel')) {
      const channelMatch = prompt.match(/channel\s+#([a-zA-Z0-9_-]+)/i);
      if (channelMatch && channelMatch[1]) {
        return {
          channel: channelMatch[1],
          channelId: `C${Math.random().toString(36).substring(2, 10).toUpperCase()}`
        };
      }
    }
    
    if (prompt.toLowerCase().includes('general')) {
      return {
        channel: 'general',
        channelId: 'C08JFTGTN2K'
      };
    }
    
    if (prompt.toLowerCase().includes('dev')) {
      return {
        channel: 'dev',
        channelId: 'C08JFTGTN2L'
      };
    }
    
    // M·∫∑c ƒë·ªãnh l√† channel general
    return {
      channel: 'general',
      channelId: 'C08JFTGTN2K'
    };
  }
  
  /**
   * Ph∆∞∆°ng th·ª©c h·ªó tr·ª£ tr√≠ch xu·∫•t t√™n ng∆∞·ªùi d√πng t·ª´ prompt
   */
  private extractUserName(prompt: string): string {
    // M·∫∑c ƒë·ªãnh l√† user123
    let userName = 'user123';
    
    // T√¨m c√°c pattern nh∆∞ "user X", "ng∆∞·ªùi d√πng X", v√† c√°c t√™n ph·ªï bi·∫øn
    if (prompt.match(/user\s+([a-zA-Z0-9_-]+)/i)) {
      userName = prompt.match(/user\s+([a-zA-Z0-9_-]+)/i)[1];
    } else if (prompt.match(/ng∆∞·ªùi d√πng\s+([a-zA-Z0-9_-]+)/i)) {
      userName = prompt.match(/ng∆∞·ªùi d√πng\s+([a-zA-Z0-9_-]+)/i)[1];
    } else if (prompt.toLowerCase().includes('ph√∫c')) {
      userName = 'Ph√∫c';
    } else if (prompt.toLowerCase().includes('h∆∞ng')) {
      userName = 'H∆∞ng';
    } else if (prompt.toLowerCase().includes('ƒëƒÉng')) {
      userName = 'ƒêƒÉng';
    }
    
    return userName;
  }
  
  /**
   * Ph∆∞∆°ng th·ª©c h·ªó tr·ª£ tr√≠ch xu·∫•t s·ªë l∆∞·ª£ng task t·ª´ prompt
   */
  private extractTaskCount(prompt: string): number {
    // T√¨m c√°c s·ªë trong prompt
    const matches = prompt.match(/\d+\s+task/i);
    if (matches) {
      const count = parseInt(matches[0]);
      if (!isNaN(count)) {
        return count;
      }
    }
    
    // M·∫∑c ƒë·ªãnh l√† 2 task
    return 2;
  }
  
  /**
   * Ph∆∞∆°ng th·ª©c h·ªó tr·ª£ tr√≠ch xu·∫•t n·ªôi dung tin nh·∫Øn t·ª´ prompt
   */
  private extractMessageContent(prompt: string): string {
    // T√¨m c√°c pattern nh∆∞ "v·ªõi n·ªôi dung X", "message X"
    const contentMatch = prompt.match(/v·ªõi n·ªôi dung[:\s]+["'](.+?)["']/i) || 
                        prompt.match(/message[:\s]+["'](.+?)["']/i) ||
                        prompt.match(/tin nh·∫Øn[:\s]+["'](.+?)["']/i);
    
    if (contentMatch && contentMatch[1]) {
      return contentMatch[1];
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y pattern c·ª• th·ªÉ, s·ª≠ d·ª•ng prompt l√†m n·ªôi dung
    return `Th√¥ng b√°o: ${prompt}`;
  }
  
  /**
   * Gi·∫£ l·∫≠p g·ª≠i tin nh·∫Øn
   */
  private mockSendMessage(prompt: string): StepResult {
    // N·∫øu l√† th√¥ng b√°o v·ªÅ vi·ªác c·∫≠p nh·∫≠t tr·∫°ng th√°i task t·ª´ Jira
    if (prompt.toLowerCase().includes('c·∫≠p nh·∫≠t') && 
        (prompt.toLowerCase().includes('task') || prompt.toLowerCase().includes('c√¥ng vi·ªác')) &&
        (prompt.toLowerCase().includes('ho√†n th√†nh') || prompt.toLowerCase().includes('done'))) {
      
      // T√¨m m√£ task trong prompt (pattern XDEMO2-xxx)
      const taskMatches = prompt.match(/XDEMO2-\d+/g);
      const taskIds = taskMatches ? [...new Set(taskMatches)] : ['XDEMO2-1', 'XDEMO2-3']; // L·∫•y unique values
      
      return {
        success: true,
        data: {
          messageId: `slack-${Date.now()}`,
          channel: "general",
          timestamp: new Date().toISOString(),
          text: `‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${taskIds.length} task sang tr·∫°ng th√°i Done: ${taskIds.join(', ')}`,
          blocks: [
            {
              type: "header",
              text: {
                type: "plain_text",
                text: "‚úÖ C·∫≠p nh·∫≠t task th√†nh c√¥ng"
              }
            },
            {
              type: "section",
              text: {
                type: "mrkdwn",
                text: `ƒê√£ c·∫≠p nh·∫≠t ${taskIds.length} task sang tr·∫°ng th√°i *Done*:`
              }
            },
            ...taskIds.map(taskId => ({
              type: "section",
              text: {
                type: "mrkdwn",
                text: `‚Ä¢ *${taskId}*: ƒê√£ ho√†n th√†nh`
              },
              accessory: {
                type: "button",
                text: {
                  type: "plain_text",
                  text: "Xem chi ti·∫øt"
                },
                url: `https://example.com/jira/${taskId}`
              }
            })),
            {
              type: "context",
              elements: [
                {
                  type: "mrkdwn",
                  text: `ü§ñ *DevAssist Bot* | ${new Date().toLocaleString('vi-VN')}`
                }
              ]
            }
          ]
        },
        metadata: {
          executionTime: 280,
          tokenUsage: 130
        }
      };
    }
    
    // N·∫øu l√† y√™u c·∫ßu x√°c nh·∫≠n v·ªÅ vi·ªác ho√†n th√†nh c√¥ng vi·ªác
    if (prompt.toLowerCase().includes('ho√†n th√†nh c√¥ng vi·ªác') || 
        prompt.toLowerCase().includes('x√°c nh·∫≠n') || 
        prompt.toLowerCase().includes('c·∫£m ∆°n')) {
      
      // Tr√≠ch xu·∫•t n·ªôi dung tin nh·∫Øn t·ª´ prompt n·∫øu c√≥
      let messageContent = '';
      const matches = prompt.match(/'(.*?)'/);
      if (matches && matches.length > 1) {
        messageContent = matches[1];
      } else {
        messageContent = "C·∫£m ∆°n b·∫°n ƒë√£ th√¥ng b√°o. Vui l√≤ng cung c·∫•p th√™m th√¥ng tin v·ªÅ c√¥ng vi·ªác ƒë√£ ho√†n th√†nh.";
      }
      
      return {
        success: true,
        data: {
          messageId: "slack-confirmation-123",
          channel: "direct-message",
          timestamp: new Date().toISOString(),
          text: messageContent,
          recipientId: "user123"
        },
        metadata: {
          executionTime: 280,
          tokenUsage: 130
        }
      };
    }
    
    // N·∫øu l√† th√¥ng b√°o v·ªÅ c·∫≠p nh·∫≠t b√°o c√°o trong Confluence
    if (prompt.toLowerCase().includes('b√°o c√°o') && prompt.toLowerCase().includes('confluence')) {
      return {
        success: true,
        data: {
          messageId: `slack-report-${Date.now()}`,
          channel: "reports",
          timestamp: new Date().toISOString(),
          text: "üìù ƒê√£ c·∫≠p nh·∫≠t b√°o c√°o h√†ng ng√†y tr√™n Confluence",
          blocks: [
            {
              type: "section",
              text: {
                type: "mrkdwn",
                text: "üìù *ƒê√£ c·∫≠p nh·∫≠t b√°o c√°o h√†ng ng√†y*"
              }
            },
            {
              type: "section",
              text: {
                type: "mrkdwn",
                text: `B√°o c√°o ng√†y ${new Date().toLocaleDateString('vi-VN')} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr√™n Confluence v·ªõi nh·ªØng task ƒë√£ ho√†n th√†nh h√¥m nay.`
              }
            },
            {
              type: "section",
              text: {
                type: "mrkdwn",
                text: "*Xem b√°o c√°o ƒë·∫ßy ƒë·ªß t·∫°i:*"
              },
              accessory: {
                type: "button",
                text: {
                  type: "plain_text",
                  text: "Xem b√°o c√°o"
                },
                url: "https://confluence.example.com/pages/CONF-456"
              }
            }
          ]
        },
        metadata: {
          executionTime: 280,
          tokenUsage: 130
        }
      };
    }
    
    // N·∫øu l√† th√¥ng b√°o v·ªÅ task DEV-123
    if (prompt.toLowerCase().includes('dev-123')) {
      return {
        success: true,
        data: {
          messageId: "slack-123",
          channel: "dev-team",
          timestamp: "2023-04-20T17:32:10Z",
          text: "‚úÖ user123 ƒë√£ ho√†n th√†nh task DEV-123: Implement login feature"
        },
        metadata: {
          executionTime: 280,
          tokenUsage: 130
        }
      };
    }
    
    // Response m·∫∑c ƒë·ªãnh cho c√°c tr∆∞·ªùng h·ª£p kh√°c
    return {
      success: true,
      data: {
        messageId: '1621234567.123456',
        channel: 'C08JFTGTN2K',
        timestamp: new Date().toISOString(),
        message: {
          text: `ƒê√£ g·ª≠i th√¥ng b√°o: ${prompt.substring(0, 50)}...`
        }
      },
      metadata: {
        executionTime: 280,
        tokenUsage: 130
      }
    };
  }
  
  /**
   * L·∫•y c√°c tin nh·∫Øn li√™n quan ƒë·∫øn m·ªôt task
   */
  private mockGetConversationForTask(prompt: string): StepResult {
    // T√¨m m√£ task XDEMO2-xxx trong prompt
    const taskMatches = prompt.match(/XDEMO2-\d+/g);
    const taskIds = taskMatches ? [...new Set(taskMatches)] : [];
    
    // N·∫øu c√≥ t√¨m th·∫•y task n√†o kh√¥ng
    if (taskIds.length > 0) {
      // T·∫°o tin nh·∫Øn cho m·ªói task ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
      const allMessages = taskIds.flatMap(taskId => {
        // S·ªë id t·ª´ m√£ task
        const taskNumber = parseInt(taskId.split('-')[1]);
        
        // T·∫°o c√°c tin nh·∫Øn li√™n quan ƒë·∫øn task n√†y
        return [
          {
            author: "user123",
            text: `T√¥i b·∫Øt ƒë·∫ßu l√†m task ${taskId}`,
            timestamp: new Date(Date.now() - 86400000).toISOString(),
            channel: "dev-team"
          },
          {
            author: "team_lead",
            text: `${taskId} c·∫ßn ƒë∆∞·ª£c ho√†n th√†nh tr∆∞·ªõc th·ª© 6 nh√©`,
            timestamp: new Date(Date.now() - 72000000).toISOString(),
            channel: "dev-team"
          },
          {
            author: "user123",
            text: `ƒê√£ ho√†n th√†nh task ${taskId}, PR: https://github.com/example/PR-${taskNumber}`,
            timestamp: new Date(Date.now() - 28800000).toISOString(),
            channel: "dev-team"
          },
          {
            author: "reviewer",
            text: `ƒê√£ approve PR c·ªßa task ${taskId}`,
            timestamp: new Date(Date.now() - 14400000).toISOString(),
            channel: "dev-team"
          }
        ];
      });
      
      return {
        success: true,
        data: {
          messages: allMessages,
          channel: "dev-team",
          taskIds,
          total: allMessages.length
        },
        metadata: {
          executionTime: 380 + taskIds.length * 50,
          tokenUsage: 160 + taskIds.length * 40
        }
      };
    }
    
    // N·∫øu prompt ƒë·ªÅ c·∫≠p ƒë·∫øn DEV-123
    if (prompt.toLowerCase().includes('dev-123')) {
      return {
        success: true,
        data: {
          messages: [
            {
              author: "user123",
              text: "ƒêang g·∫∑p kh√≥ khƒÉn v·ªõi vi·ªác x·ª≠ l√Ω refresh token",
              timestamp: "2023-04-20T09:30:00Z",
              channel: "dev-team"
            },
            {
              author: "team_lead",
              text: "Th·ª≠ c√°ch n√†y xem: https://auth0.com/docs/tokens/refresh-tokens",
              timestamp: "2023-04-20T10:15:00Z",
              channel: "dev-team"
            },
            {
              author: "user123",
              text: "ƒê√£ gi·∫£i quy·∫øt ƒë∆∞·ª£c v·∫•n ƒë·ªÅ v√† implement xong ph·∫ßn login flow",
              timestamp: "2023-04-20T14:20:00Z",
              channel: "dev-team"
            }
          ],
          channel: "dev-team",
          taskId: "DEV-123"
        },
        metadata: {
          executionTime: 380,
          tokenUsage: 160
        }
      };
    }

    // Fallback cho tr∆∞·ªùng h·ª£p t√¨m ki·∫øm v·ªÅ vi·ªác ho√†n th√†nh c√¥ng vi·ªác
    if (prompt.toLowerCase().includes('ho√†n th√†nh') || 
        prompt.toLowerCase().includes('xong vi·ªác') ||
        prompt.toLowerCase().includes('done')) {
      return {
        success: true,
        data: {
          messages: [
            { 
              text: 'T√¥i ƒë√£ ho√†n th√†nh c√°c task XDEMO2-1, XDEMO2-3 v√† XDEMO2-5 h√¥m nay', 
              user: 'user123', 
              timestamp: new Date(Date.now() - 3600000).toISOString(),
              channel: "status-updates"
            },
            { 
              text: 'Great job! C·∫ßn c·∫≠p nh·∫≠t JIRA ƒë·ªÉ team bi·∫øt', 
              user: 'manager', 
              timestamp: new Date(Date.now() - 3500000).toISOString(),
              channel: "status-updates" 
            },
            { 
              text: 'ƒê√£ update JIRA status r·ªìi. ƒê√£ set c√°c task sang Done.', 
              user: 'user123', 
              timestamp: new Date(Date.now() - 3400000).toISOString(),
              channel: "status-updates"
            }
          ],
          channel: "status-updates",
          query: "ho√†n th√†nh c√¥ng vi·ªác",
          total: 3
        },
        metadata: {
          executionTime: 310,
          tokenUsage: 160
        }
      };
    }

    // Fallback cho c√°c tr∆∞·ªùng h·ª£p kh√°c
    return {
      success: true,
      data: {
        messages: [
          { text: 'T√¥i ƒëang l√†m task n√†y', user: 'U12345', timestamp: '2023-04-19T10:30:00Z', channel: "general" },
          { text: 'C·∫ßn tr·ª£ gi√∫p v·ªÅ ph·∫ßn ABC', user: 'U12345', timestamp: '2023-04-19T11:45:00Z', channel: "general" },
          { text: 'ƒê√£ gi·∫£i quy·∫øt ƒë∆∞·ª£c v·∫•n ƒë·ªÅ', user: 'U12345', timestamp: '2023-04-19T15:20:00Z', channel: "general" }
        ],
        channel: "general",
        total: 3,
        query: prompt.substring(0, 50)
      },
      metadata: {
        executionTime: 310,
        tokenUsage: 160
      }
    };
  }
  
  /**
   * Gi·∫£ l·∫≠p g·ª≠i tin nh·∫Øn ƒë·ªÅ xu·∫•t th·ªùi gian cho cu·ªôc h·ªçp
   */
  private mockSendMeetingTimeProposal(prompt: string): StepResult {
    // X√°c ƒë·ªãnh ng∆∞·ªùi nh·∫≠n
    let recipients: string[] = [];
    if (prompt.toLowerCase().includes('user123')) {
      recipients.push('user123');
    }
    if (prompt.toLowerCase().includes('ph√∫c')) {
      recipients.push('ph√∫c');
    }
    if (prompt.toLowerCase().includes('h∆∞ng')) {
      recipients.push('h∆∞ng');
    }
    
    // M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi nh·∫≠n c·ª• th·ªÉ
    if (recipients.length === 0) {
      recipients = ['user123'];
    }
    
    // T·∫°o gi·∫£ l·∫≠p c√°c kho·∫£ng th·ªùi gian ƒë·ªÅ xu·∫•t
    const timeSlots = [
      { day: 'Th·ª© Ba', date: '2025-04-22', time: '10:00 - 11:00', location: 'Ph√≤ng h·ªçp A' },
      { day: 'Th·ª© T∆∞', date: '2025-04-23', time: '14:00 - 15:00', location: 'Ph√≤ng h·ªçp B' },
      { day: 'Th·ª© NƒÉm', date: '2025-04-24', time: '09:00 - 10:00', location: 'Ph√≤ng h·ªçp A' }
    ];
    
    // T·∫°o tin nh·∫Øn v·ªõi c√°c kh·ªëi t∆∞∆°ng t√°c
    const message = {
      text: `*ƒê·ªÅ xu·∫•t th·ªùi gian cho cu·ªôc h·ªçp*\n\nD∆∞·ªõi ƒë√¢y l√† c√°c kho·∫£ng th·ªùi gian m√† t·∫•t c·∫£ ng∆∞·ªùi tham gia (${recipients.join(', ')}) ƒë·ªÅu r·∫£nh:`,
      blocks: [
        {
          type: 'header',
          text: {
            type: 'plain_text',
            text: 'ƒê·ªÅ xu·∫•t th·ªùi gian cho cu·ªôc h·ªçp',
            emoji: true
          }
        },
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `D∆∞·ªõi ƒë√¢y l√† c√°c kho·∫£ng th·ªùi gian m√† t·∫•t c·∫£ ng∆∞·ªùi tham gia (${recipients.join(', ')}) ƒë·ªÅu r·∫£nh:`
          }
        },
        {
          type: 'divider'
        },
        ...timeSlots.map(slot => ({
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `*${slot.day} (${slot.date})*\n${slot.time}\nƒê·ªãa ƒëi·ªÉm: ${slot.location}`
          },
          accessory: {
            type: 'button',
            text: {
              type: 'plain_text',
              text: 'Ch·ªçn',
              emoji: true
            },
            value: `${slot.date}_${slot.time}`
          }
        })),
        {
          type: 'divider'
        },
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: 'Vui l√≤ng ch·ªçn m·ªôt kho·∫£ng th·ªùi gian ph√π h·ª£p ho·∫∑c ƒë·ªÅ xu·∫•t th·ªùi gian kh√°c'
          }
        },
        {
          type: 'actions',
          elements: [
            {
              type: 'button',
              text: {
                type: 'plain_text',
                text: 'ƒê·ªÅ xu·∫•t th·ªùi gian kh√°c',
                emoji: true
              },
              value: 'propose_different_time'
            }
          ]
        }
      ]
    };
    
    // T·∫°o th√¥ng tin k√™nh v√† ng∆∞·ªùi nh·∫≠n
    const channelInfo = this.getChannelInfo(prompt);
    
    return {
      success: true,
      data: {
        message: message,
        messageText: message.text,
        channel: channelInfo.channel,
        channelId: channelInfo.channelId,
        recipients: recipients,
        timestamp: new Date().toISOString(),
        meetingProposal: {
          timeSlots: timeSlots,
          attendees: recipients,
          notes: "Cu·ªôc h·ªçp v·ªõi " + recipients.join(", ")
        },
        messageType: 'meeting_proposal'
      },
      metadata: {
        executionTime: 350,
        tokenUsage: 120
      }
    };
  }
  
  /**
   * Gi·∫£ l·∫≠p g·ª≠i tin nh·∫Øn h·ªèi v·ªÅ vi·ªác ƒëi·ªÅu ch·ªânh l·ªãch c·ªßa Minh
   */
  private mockSendScheduleAdjustmentInquiry(prompt: string): StepResult {
    // Ki·ªÉm tra xem prompt c√≥ mu·ªën h·ªèi √Ω ki·∫øn team hay h·ªèi tr·ª±c ti·∫øp Minh
    const isTeamInquiry = prompt.toLowerCase().includes('team') || 
                         prompt.toLowerCase().includes('m·ªçi ng∆∞·ªùi') || 
                         prompt.toLowerCase().includes('h·ªçp thi·∫øu');
    
    if (isTeamInquiry) {
      // T·∫°o tin nh·∫Øn h·ªèi √Ω ki·∫øn team v·ªÅ vi·ªác h·ªçp thi·∫øu Minh
      const message = {
        text: "H·ªèi √Ω ki·∫øn v·ªÅ cu·ªôc h·ªçp t√≠nh nƒÉng x√°c th·ª±c m·ªõi",
        blocks: [
          {
            type: "header",
            text: {
              type: "plain_text",
              text: "ƒê·ªÅ xu·∫•t cu·ªôc h·ªçp v·ªÅ t√≠nh nƒÉng x√°c th·ª±c m·ªõi",
              emoji: true
            }
          },
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: "Ch√∫ng ta c·∫ßn t·ªï ch·ª©c cu·ªôc h·ªçp v·ªÅ t√≠nh nƒÉng x√°c th·ª±c m·ªõi nh∆∞ng *Minh kh√¥ng c√≥ l·ªãch tr·ªëng* trong tu·∫ßn n√†y."
            }
          },
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: "C√≥ c√°c khung gi·ªù sau ph√π h·ª£p cho @Ph√∫c, @H∆∞ng v√† @ƒêƒÉng:\n‚Ä¢ *Th·ª© Ba (22/04)* 9:00 - 10:30\n‚Ä¢ *Th·ª© T∆∞ (23/04)* 14:00 - 15:30"
            }
          },
          {
            type: "actions",
            elements: [
              {
                type: "button",
                text: {
                  type: "plain_text",
                  text: "H·ªçp kh√¥ng c√≥ Minh",
                  emoji: true
                },
                value: "proceed_without_minh",
                style: "primary"
              },
              {
                type: "button",
                text: {
                  type: "plain_text",
                  text: "T√¨m th·ªùi gian kh√°c",
                  emoji: true
                },
                value: "find_alternative_time"
              },
              {
                type: "button",
                text: {
                  type: "plain_text",
                  text: "H·ªèi Minh c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh",
                  emoji: true
                },
                value: "ask_minh"
              }
            ]
          }
        ]
      };
      
      return {
        success: true,
        data: {
          message: message,
          channel: "dev-team",
          channelId: "C08JFTGTN2K",
          messageId: `schedule-inquiry-${Date.now()}`,
          timestamp: new Date().toISOString(),
          recipients: ["Ph√∫c", "H∆∞ng", "ƒêƒÉng"],
          thread: null,
          messageType: "schedule_adjustment_inquiry_team"
        },
        metadata: {
          executionTime: 350,
          tokenUsage: 150
        }
      };
    } else {
      // T·∫°o tin nh·∫Øn tr·ª±c ti·∫øp h·ªèi Minh c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh l·ªãch kh√¥ng
      const message = {
        text: "H·ªèi v·ªÅ kh·∫£ nƒÉng ƒëi·ªÅu ch·ªânh l·ªãch cho cu·ªôc h·ªçp t√≠nh nƒÉng x√°c th·ª±c m·ªõi",
        blocks: [
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: "Ch√†o Minh, team c·∫ßn t·ªï ch·ª©c cu·ªôc h·ªçp v·ªÅ t√≠nh nƒÉng x√°c th·ª±c m·ªõi trong tu·∫ßn n√†y. Tuy nhi√™n, c√≥ v·∫ª l·ªãch c·ªßa b·∫°n ƒë√£ k√≠n."
            }
          },
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: "B·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh l·ªãch ƒë·ªÉ tham gia v√†o m·ªôt trong c√°c khung gi·ªù sau kh√¥ng?\n‚Ä¢ *Th·ª© Ba (22/04)* 9:00 - 10:30\n‚Ä¢ *Th·ª© T∆∞ (23/04)* 14:00 - 15:30"
            }
          },
          {
            type: "actions",
            elements: [
              {
                type: "button",
                text: {
                  type: "plain_text",
                  text: "Th·ª© Ba ƒë∆∞·ª£c",
                  emoji: true
                },
                value: "tuesday_available",
                style: "primary"
              },
              {
                type: "button",
                text: {
                  type: "plain_text",
                  text: "Th·ª© T∆∞ ƒë∆∞·ª£c",
                  emoji: true
                },
                value: "wednesday_available",
                style: "primary"
              },
              {
                type: "button",
                text: {
                  type: "plain_text",
                  text: "Kh√¥ng th·ªÉ tham gia",
                  emoji: true
                },
                value: "cannot_attend"
              }
            ]
          }
        ]
      };
      
      return {
        success: true,
        data: {
          message: message,
          channel: "direct-message",
          channelId: "D08ABCDEFG",
          messageId: `direct-msg-${Date.now()}`,
          timestamp: new Date().toISOString(),
          recipient: "Minh",
          thread: null,
          messageType: "schedule_adjustment_inquiry_direct"
        },
        metadata: {
          executionTime: 330,
          tokenUsage: 140
        }
      };
    }
  }
} 