import { Injectable } from '@nestjs/common';
import { EnhancedLogger } from '../../utils/logger';
import { IAgent } from '../agent-factory/agent-factory.service';
import { StepResult } from '../models/action-plan.model';

@Injectable()
export class MockSlackAgent implements IAgent {
  private readonly logger = EnhancedLogger.getLogger('MockSlackAgent');
  
  async executePrompt(prompt: string, options?: any): Promise<StepResult> {
    this.logger.log(`MockSlackAgent executing: ${prompt}`);
    
    // Gi·∫£ l·∫≠p ƒë·ªô tr·ªÖ
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // X·ª≠ l√Ω c√°c lo·∫°i prompt kh√°c nhau
    if (prompt.toLowerCase().includes('g·ª≠i') || prompt.toLowerCase().includes('th√¥ng b√°o') || prompt.toLowerCase().includes('send message')) {
      return this.mockSendMessage(prompt);
    }
    
    if (prompt.toLowerCase().includes('t√¨m tin nh·∫Øn') || prompt.toLowerCase().includes('t√¨m trao ƒë·ªïi') || 
        prompt.toLowerCase().includes('DEV-123') || prompt.toLowerCase().includes('task dev-123')) {
      return this.mockGetConversationForTask(prompt);
    }
    
    // Default l√† t√¨m ki·∫øm tin nh·∫Øn
    return this.mockSearchMessages(prompt);
  }
  
  /**
   * T√¨m ki·∫øm tin nh·∫Øn
   */
  private mockSearchMessages(prompt: string): StepResult {
    return {
      success: true,
      data: {
        messages: [
          { text: 'ƒê√£ ho√†n th√†nh task XDEMO2-1', user: 'U12345', timestamp: new Date().toISOString() },
          { text: 'C·∫ßn review task XDEMO2-2', user: 'U67890', timestamp: new Date().toISOString() }
        ],
        total: 2
      },
      metadata: {
        executionTime: 310,
        tokenUsage: 160
      }
    };
  }
  
  /**
   * G·ª≠i tin nh·∫Øn
   */
  private mockSendMessage(prompt: string): StepResult {
    // N·∫øu l√† th√¥ng b√°o v·ªÅ vi·ªác c·∫≠p nh·∫≠t tr·∫°ng th√°i task t·ª´ Jira
    if (prompt.toLowerCase().includes('c·∫≠p nh·∫≠t') && 
        (prompt.toLowerCase().includes('task') || prompt.toLowerCase().includes('c√¥ng vi·ªác')) &&
        (prompt.toLowerCase().includes('ho√†n th√†nh') || prompt.toLowerCase().includes('done'))) {
      
      // T√¨m m√£ task trong prompt (pattern XDEMO2-xxx)
      const taskMatches = prompt.match(/XDEMO2-\d+/g);
      const taskIds = taskMatches ? [...new Set(taskMatches)] : ['XDEMO2-1', 'XDEMO2-3']; // L·∫•y unique values
      
      return {
        success: true,
        data: {
          messageId: `slack-${Date.now()}`,
          channel: "general",
          timestamp: new Date().toISOString(),
          text: `‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${taskIds.length} task sang tr·∫°ng th√°i Done: ${taskIds.join(', ')}`,
          blocks: [
            {
              type: "header",
              text: {
                type: "plain_text",
                text: "‚úÖ C·∫≠p nh·∫≠t task th√†nh c√¥ng"
              }
            },
            {
              type: "section",
              text: {
                type: "mrkdwn",
                text: `ƒê√£ c·∫≠p nh·∫≠t ${taskIds.length} task sang tr·∫°ng th√°i *Done*:`
              }
            },
            ...taskIds.map(taskId => ({
              type: "section",
              text: {
                type: "mrkdwn",
                text: `‚Ä¢ *${taskId}*: ƒê√£ ho√†n th√†nh`
              },
              accessory: {
                type: "button",
                text: {
                  type: "plain_text",
                  text: "Xem chi ti·∫øt"
                },
                url: `https://example.com/jira/${taskId}`
              }
            })),
            {
              type: "context",
              elements: [
                {
                  type: "mrkdwn",
                  text: `ü§ñ *DevAssist Bot* | ${new Date().toLocaleString('vi-VN')}`
                }
              ]
            }
          ]
        },
        metadata: {
          executionTime: 280,
          tokenUsage: 130
        }
      };
    }
    
    // N·∫øu l√† y√™u c·∫ßu x√°c nh·∫≠n v·ªÅ vi·ªác ho√†n th√†nh c√¥ng vi·ªác
    if (prompt.toLowerCase().includes('ho√†n th√†nh c√¥ng vi·ªác') || 
        prompt.toLowerCase().includes('x√°c nh·∫≠n') || 
        prompt.toLowerCase().includes('c·∫£m ∆°n')) {
      
      // Tr√≠ch xu·∫•t n·ªôi dung tin nh·∫Øn t·ª´ prompt n·∫øu c√≥
      let messageContent = '';
      const matches = prompt.match(/'(.*?)'/);
      if (matches && matches.length > 1) {
        messageContent = matches[1];
      } else {
        messageContent = "C·∫£m ∆°n b·∫°n ƒë√£ th√¥ng b√°o. Vui l√≤ng cung c·∫•p th√™m th√¥ng tin v·ªÅ c√¥ng vi·ªác ƒë√£ ho√†n th√†nh.";
      }
      
      return {
        success: true,
        data: {
          messageId: "slack-confirmation-123",
          channel: "direct-message",
          timestamp: new Date().toISOString(),
          text: messageContent,
          recipientId: "user123"
        },
        metadata: {
          executionTime: 280,
          tokenUsage: 130
        }
      };
    }
    
    // N·∫øu l√† th√¥ng b√°o v·ªÅ c·∫≠p nh·∫≠t b√°o c√°o trong Confluence
    if (prompt.toLowerCase().includes('b√°o c√°o') && prompt.toLowerCase().includes('confluence')) {
      return {
        success: true,
        data: {
          messageId: `slack-report-${Date.now()}`,
          channel: "reports",
          timestamp: new Date().toISOString(),
          text: "üìù ƒê√£ c·∫≠p nh·∫≠t b√°o c√°o h√†ng ng√†y tr√™n Confluence",
          blocks: [
            {
              type: "section",
              text: {
                type: "mrkdwn",
                text: "üìù *ƒê√£ c·∫≠p nh·∫≠t b√°o c√°o h√†ng ng√†y*"
              }
            },
            {
              type: "section",
              text: {
                type: "mrkdwn",
                text: `B√°o c√°o ng√†y ${new Date().toLocaleDateString('vi-VN')} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr√™n Confluence v·ªõi nh·ªØng task ƒë√£ ho√†n th√†nh h√¥m nay.`
              }
            },
            {
              type: "section",
              text: {
                type: "mrkdwn",
                text: "*Xem b√°o c√°o ƒë·∫ßy ƒë·ªß t·∫°i:*"
              },
              accessory: {
                type: "button",
                text: {
                  type: "plain_text",
                  text: "Xem b√°o c√°o"
                },
                url: "https://confluence.example.com/pages/CONF-456"
              }
            }
          ]
        },
        metadata: {
          executionTime: 280,
          tokenUsage: 130
        }
      };
    }
    
    // N·∫øu l√† th√¥ng b√°o v·ªÅ task DEV-123
    if (prompt.toLowerCase().includes('dev-123')) {
      return {
        success: true,
        data: {
          messageId: "slack-123",
          channel: "dev-team",
          timestamp: "2023-04-20T17:32:10Z",
          text: "‚úÖ user123 ƒë√£ ho√†n th√†nh task DEV-123: Implement login feature"
        },
        metadata: {
          executionTime: 280,
          tokenUsage: 130
        }
      };
    }
    
    // Response m·∫∑c ƒë·ªãnh cho c√°c tr∆∞·ªùng h·ª£p kh√°c
    return {
      success: true,
      data: {
        messageId: '1621234567.123456',
        channel: 'C08JFTGTN2K',
        timestamp: new Date().toISOString(),
        message: {
          text: `ƒê√£ g·ª≠i th√¥ng b√°o: ${prompt.substring(0, 50)}...`
        }
      },
      metadata: {
        executionTime: 280,
        tokenUsage: 130
      }
    };
  }
  
  /**
   * L·∫•y c√°c tin nh·∫Øn li√™n quan ƒë·∫øn m·ªôt task
   */
  private mockGetConversationForTask(prompt: string): StepResult {
    // N·∫øu prompt ƒë·ªÅ c·∫≠p ƒë·∫øn DEV-123
    if (prompt.toLowerCase().includes('dev-123')) {
      return {
        success: true,
        data: {
          messages: [
            {
              author: "user123",
              text: "ƒêang g·∫∑p kh√≥ khƒÉn v·ªõi vi·ªác x·ª≠ l√Ω refresh token",
              timestamp: "2023-04-20T09:30:00Z",
              channel: "dev-team"
            },
            {
              author: "team_lead",
              text: "Th·ª≠ c√°ch n√†y xem: https://auth0.com/docs/tokens/refresh-tokens",
              timestamp: "2023-04-20T10:15:00Z",
              channel: "dev-team"
            },
            {
              author: "user123",
              text: "ƒê√£ gi·∫£i quy·∫øt ƒë∆∞·ª£c v·∫•n ƒë·ªÅ v√† implement xong ph·∫ßn login flow",
              timestamp: "2023-04-20T14:20:00Z",
              channel: "dev-team"
            }
          ],
          channel: "dev-team",
          taskId: "DEV-123"
        },
        metadata: {
          executionTime: 380,
          tokenUsage: 160
        }
      };
    }

    // Fallback cho c√°c task kh√°c
    return {
      success: true,
      data: {
        messages: [
          { text: 'T√¥i ƒëang l√†m task n√†y', user: 'U12345', timestamp: '2023-04-19T10:30:00Z' },
          { text: 'C·∫ßn tr·ª£ gi√∫p v·ªÅ ph·∫ßn ABC', user: 'U12345', timestamp: '2023-04-19T11:45:00Z' },
          { text: 'ƒê√£ gi·∫£i quy·∫øt ƒë∆∞·ª£c v·∫•n ƒë·ªÅ', user: 'U12345', timestamp: '2023-04-19T15:20:00Z' }
        ],
        channel: "general",
        total: 3
      },
      metadata: {
        executionTime: 310,
        tokenUsage: 160
      }
    };
  }
} 